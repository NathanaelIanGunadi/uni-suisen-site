generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String
  firstName String?
  lastName  String?

  // NEW
  notifyOnNewSubmission   Boolean @default(false) // reviewers/admins
  notifyOnReviewDecision  Boolean @default(false) // students

  submissions Submission[]
  reviews     Review[]
}

model Submission {
  id          Int              @id @default(autoincrement())
  title       String
  // DEPRECATED: keep for backward compatibility (old rows)
  filename    String?          // <-- kept optional; new uploads use files[]
  status      Status           @default(PENDING)
  studentId   Int
  reviews     Review[]
  createdAt   DateTime         @default(now())

  student     User             @relation(fields: [studentId], references: [id])
  files       SubmissionFile[] // <-- new: attachments
}

model SubmissionFile {
  id            Int         @id @default(autoincrement())
  submissionId  Int
  filename      String      // stored filename on disk
  originalName  String      // original uploaded name
  createdAt     DateTime    @default(now())

  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model Review {
  id            Int      @id @default(autoincrement())
  submissionId  Int
  reviewerId    Int
  approved      Boolean
  comments      String?
  reviewedAt    DateTime @default(now())

  submission    Submission @relation(fields: [submissionId], references: [id])
  reviewer      User       @relation(fields: [reviewerId], references: [id])
}

enum Role {
  STUDENT
  REVIEWER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
